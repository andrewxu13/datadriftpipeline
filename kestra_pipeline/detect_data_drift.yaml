id: detect-data-drift
namespace: dev
inputs:
    - name: startDate
      type: STRING
      defaults: "2011-03-01"
    - name: endDate
      type: STRING
      defaults: "2011-03-31"
    - name: data_url
      type: STRING 
      defaults: "https://gist.githubusercontent.com/khuyentran1401/4eba9c4e4777686a0a67c623e24687a3/raw/48bb7b223270139a2d7356a7ff2742471e3d0b39/day.csv"
tasks:
- id: getReferenceTable
  type: io.kestra.plugin.jdbc.postgresql.CopyOut
  url: jdbc:postgresql://host.docker.internal:5432/
  username: "{{secret('POSTGRES_USERNAME')}}"
  password: "{{secret('POSTGRES_PASSWORD')}}"
  format: CSV
  sql: SELECT * FROM reference
  header: true
- id: wdir
  type: io.kestra.core.tasks.flows.WorkingDirectory
  tasks:
    - id: cloneRepository
      type: io.kestra.plugin.git.Clone
      url: https://github.com/khuyentran1401/detect-data-drift-pipeline
      branch: main
    - id: saveReferenceToCSV
      type: io.kestra.core.tasks.storages.LocalFiles
      inputs:
        data/reference.csv: "{{outputs.getReferenceTable.uri}}"
    - id: getCurrentCSV
      type: io.kestra.plugin.scripts.python.Script
      beforeCommands:
        - pip install pandas
      script: |
        import pandas as pd
        df = pd.read_csv({{inputs.data_url}}, parse_dates=["dteday"])
        print(f"Getting data from {{inputs.startDate}} to {{inputs.endDate}}")
        df = df.loc[df.dteday.between("{{inputs.startDate}}", "{{inputs.endDate}}")]
        df.to_csv("data/current.csv", index=False)
    - id: detectDataDrift
      type: io.kestra.plugin.scripts.python.Commands
      beforeCommands:
        - pip install -r src/detect/requirements.txt
      commands:
        - python src/detect/detect_data_drift.py
    - id: saveFiles
      type: io.kestra.core.tasks.storages.LocalFiles
      outputs:
        - data/current.csv
- id: saveToCurrentTable
  type: io.kestra.plugin.jdbc.postgresql.CopyIn
  url: jdbc:postgresql://host.docker.internal:5432/
  username: "{{secret('POSTGRES_USERNAME')}}"
  password: "{{secret('POSTGRES_PASSWORD')}}"
  from: "{{outputs.saveFiles.uris['data/current.csv']}}"
  table: current
  format: CSV
  header: true
  delimiter: ","
listeners:
  - conditions:
    - type: io.kestra.core.models.conditions.types.VariableCondition
      expression: "{{outputs.detectDataDrift.vars.drift_detected}} == true"
    tasks:
      - id: slack
        type: io.kestra.plugin.notifications.slack.SlackExecution
        url: "{{secret('SLACK_WEBHOOK')}}"
        customMessage: Detect data drift from {{inputs.startDate}} to {{inputs.endDate}}.